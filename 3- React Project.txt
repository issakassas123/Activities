*. The goals of this section are to become familiar with the following:
    *. Vite
    *. React project files and structure
    *. Core React concepts
    *. React DevTools for debugging
    *. TypeScript integration
    *. Axios for HTTP requests
    *. Material UI for component styling

*. Creating the React Project Using Vite
    Vite is a modern build tool that allows fast start-up and hot-reload for React applications.
    ðŸ”— https://vite.dev

    *. Project Setup
        *. Navigate to the Activities directory.
        *. Create a Vite React project:
            npm create vite@latest
            Project name: Client
            Framework: React
            Variant: TypeScript + SWC (Speedy Web Compiler)
            Use rollup-vite (Experimental)? Yes
        *. Navigate to the project folder and install dependencies:
            cd Client
            npm install

        *. Run the project
            npm run dev

    *. VS Code Configuration
        Recommended Extensions
            ES7+ React/Redux/React-Native/JS â€“ Code snippets for React.
            ESLint â€“ Linting and code quality checks.

    *. Changing the Development Port
        Update vite.config.ts to change the default server port:
        export default defineConfig({
            server:{
                port: 3001
            },
            plugins: [react()],
        })

    *. React Project Structure
        *. src/main.tsx
            import { createRoot } from "react-dom/client";
            import { StrictMode } from "react";
            import App from "./App";

            createRoot(document.getElementById('root')!).render(
            <StrictMode>
                <App />
            </StrictMode>
            );

        . App.tsx
            function App()
            {
                return (
                    <h3>Activities</h3>
                );
            }

            export default App;

    *. Fetching Data from the API Using React Hooks
        import { useEffect, useState } from "react";

        function App()
        {
            const title = 'Welcome to Activities';
            const [activities, setActivities] = useState<>([]);

            useEffect(() => {
                fetch("https://localhost:7026/api/activities")
                .then(response => response.json())
                .then(data => setActivities(data))
                return () => {}
            }, []);
            return (
                <div>
                    <h3 className="app" style=({color: 'red'})>{title}</h3>
                    <ul>
                    {activities.map(
                        (activity) => (
                            <li key={activity.id}>{activity.title}</li>
                        )
                    )}
                    </ul>
                </div>
            );
        }

    *. Configuring CORS on the API
        *. Update Program.cs in the API project:
            builder.Services.AddCors();
            app.UseCors(options =>
                options.AllowAnyHeader()
                .AllowAnyMethod()
                .WithOrigins("http://localhost:3000", "https://localhost:3001")
            );

    *. Creating TypeScript Models
        *. Create a lib/types directory inside src.
            *. Transform JSON objects into TypeScript models:
                https://transform.tools
            *. src/lib/types/index.d.ts
                interface Activity { or type Activity =
                    id: string
                    title: string
                    description: string
                    category: string
                    date: string
                    city: string
                    venue: string
                    isCancelled: boolean
                    longitude: number
                    latitude: number
                }
            *. Update App.tsx state to use the TypeScript model:
                const [activites, setActivities] = useState<Activity[]>([]);

    *. React DevTools
        Install the React DevTools Chrome extension.
        Pin the toolbar for quick access.
        Inspect Components and Profiler while running the app.
    
    *. Adding Material UI
        https://mui.com
        *. Install packages:
            npm install @mui/material @emotion/react @emotion/styled
            npm install @fontsource/roboto
            npm install @mui/icons-material
        *. Import fonts in main.tsx:
            import '@fontsource/roboto/300.css';
            import '@fontsource/roboto/400.css';
            import '@fontsource/roboto/500.css';
            import '@fontsource/roboto/700.css';
  
        *. Update App.tsx to use Material UI components:
            import { List, ListItem, ListItemText, Typography } from "@mui/material";
            return (
                <>
                <Typography variant='h3'>{title}</Typography>
                <List>
                    {activites.map((activity) => (
                    <ListItem key={activity.id}>
                        <ListItemText>{activity.title}</ListItemText></ListItem>
                    ))}
                </List>
                </>
            );

    *. Adding HTTPS Support
        *. Generate a local development certificate.
        *. Install vite-plugin-mkcert:
            npm install -D vite-plugin-mkcert
        *. Update vite.config.ts:
            import mkcert from 'vite-plugin-mkcert'
            // https://vite.dev/config/
            export default defineConfig({
                server:{
                    port: 3001
                },
                plugins: [react(), mkcert()],
            })

        *. This generates dev.pem and cert.pem for HTTPS.

    *. Adding or Using Axios for data Fetching
        https://axios-http.com
        Axios is a simple promise based HTTP client for the browser and node.js. 
        Axios provides a simple to use library in a small package with a very extensible interface.
        *. Install Axios:
            npm install axios
        *. Update App.tsx to fetch data with Axios:
            import axios from "axios";
            useEffect(() => {
                axios.get<Activity[]>("https://localhost:7026/api/activities")
                .then(response => setActivities(response.data))
                return () => {}
            }, []);
        
*. Summary
    By following these steps, you have:
        Created a React project with TypeScript using Vite.
        Configured VS Code for optimal React development.
        Connected the frontend to the ASP.NET Core API.
        Added HTTPS support, Axios for HTTP requests, and Material UI for styling.
        Used TypeScript models and React hooks for type-safe state management.